package com.ktnl.fapanese.exception;

import lombok.Getter;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;

@Getter
public enum ErrorCode {
    USER_NOT_EXISTED(1000, "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng", HttpStatus.NOT_FOUND),
    AUTHENTICATED(1001, "X√°c th·ª±c th·∫•t b·∫°i", HttpStatus.UNAUTHORIZED),
    INVALID_KEY(8888, "M√£ l·ªói ch∆∞a ƒë·∫∑t t√™n", HttpStatus.BAD_REQUEST),
    UNCATEGORIZED_EXCEPTION(9999, "ƒê√£ c√≥ l·ªói kh√¥ng x√°c ƒë·ªãnh x·∫£y ra", HttpStatus.INTERNAL_SERVER_ERROR),
    EMAIL_EXISTED(1002, "Email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng", HttpStatus.BAD_REQUEST),
    EMAIL_SENDER(1003, "G·ª≠i Email th·∫•t b·∫°i", HttpStatus.INTERNAL_SERVER_ERROR),
    OTP_NOT_EXISTED(1004, "OTP kh√¥ng t·ªìn t·∫°i", HttpStatus.NOT_FOUND),
    OTP_INVALID(1005, "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n", HttpStatus.BAD_REQUEST),
    USER_NOT_ISACTIVED(1006, "T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a", HttpStatus.FORBIDDEN),
    ROLE_NOT_FOUND(1007, "Kh√¥ng t√¨m th·∫•y Role c·ªßa ng∆∞·ªùi d√πng", HttpStatus.NOT_FOUND),
    USER_NOT_VERIFY_EMAIL(1008, "T√†i kho·∫£n c·ªßa b·∫°n ch∆∞a x√°c th·ª±c Email", HttpStatus.FORBIDDEN),
    USER_NEED_ADMIN_APPROVAL(1009, "T√†i kho·∫£n c·ªßa b·∫°n ƒëang ƒë·ª£i duy·ªát", HttpStatus.FORBIDDEN),
    COURSE_NOT_FOUND(1010, "Kh√¥ng t√¨m th·∫•y kh√≥a h·ªçc", HttpStatus.NOT_FOUND),
    INVALID_COURSE_NAME(1011, "Vui l√≤ng nh·∫≠p t√™n h·ª£p l·ªá", HttpStatus.BAD_REQUEST),
    PASSWORD_INCORRECT(1012, "M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c", HttpStatus.BAD_REQUEST),
    LESSON_NOT_FOUND(1013, "Kh√¥ng t√¨m th·∫•y b√†i h·ªçc", HttpStatus.NOT_FOUND),
    GRAMMAR_NOT_FOUND(1014, "Kh√¥ng t√¨m th·∫•y ng·ªØ ph√°p", HttpStatus.NOT_FOUND),
    VOCABULARY_NOT_FOUND(1014, "Kh√¥ng t√¨m th·∫•y t·ª´ v·ª±ng", HttpStatus.NOT_FOUND),
    // üëâ Validation specific error codes
    FIRSTNAME_REQUIRED(2001, "First name is required", HttpStatus.BAD_REQUEST),
    LASTNAME_REQUIRED(2002, "Last name is required", HttpStatus.BAD_REQUEST),
    EMAIL_INVALID(2003, "Invalid email format", HttpStatus.BAD_REQUEST),
    PASSWORD_INVALID(2004, "Password must be at least 8 characters", HttpStatus.BAD_REQUEST),
    ROLE_REQUIRED(2005, "Role is required", HttpStatus.BAD_REQUEST),
    DOB_INVALID(2006, "Date of birth must be in the past", HttpStatus.BAD_REQUEST),
<<<<<<< HEAD
    CAMPUS_REQUIRED(2007, "Campus is required", HttpStatus.BAD_REQUEST),

    QUESTION_NOT_FOUND(2004, "Question not found", HttpStatus.NOT_FOUND),

    LESSON_NOT_FOUND(2001, "Lesson not found", HttpStatus.NOT_FOUND),

    // Vocabulary
    VOCABULARY_NOT_FOUND(2002, "Vocabulary not found", HttpStatus.NOT_FOUND);




=======
    CAMPUS_REQUIRED(2007, "Campus is required", HttpStatus.BAD_REQUEST);
>>>>>>> 31f2da156453a0bba473bcb1614fb2737fd435cf
    ;
    private int code;
    private String message;
    private HttpStatusCode statusCode;

    ErrorCode(int code, String message, HttpStatusCode statusCode) {
        this.code = code;
        this.message = message;
        this.statusCode = statusCode;
    }
}
